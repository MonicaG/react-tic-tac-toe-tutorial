{"version":3,"sources":["index.js"],"names":["Square","props","winningSquareStyle","winningSquare","className","onClick","value","SortOrder","orderMovesAsc","Board","i","this","winningSquares","includes","squares","rowNum","colNum","gridSize","arrayIndex","concat","renderSquare","rows","renderBoardRow","React","Component","Game","state","history","Array","fill","location","xIsNext","stepNumber","slice","length","calculateWinner","setState","step","status","current","winner","moves","map","move","desc","offset","col","row","Math","floor","getLocation","applyStyle","jumpTo","reverse","handleClick","handleSortOrder","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e003c542.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst DRAW = \"D\";\n\nfunction Square(props) {\n  const winningSquareStyle = props.winningSquare ? \"winning-square\" : \"\";\n  return (\n    <button className={`square ${winningSquareStyle}`} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction SortOrder(props) {\n  return (\n    <button onClick={props.onClick}>\n      {props.orderMovesAsc ? 'Sort Moves Desc' : 'Sort Moves Asc'}\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square key={i}\n        winningSquare={this.props.winningSquares?.includes(i)}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  renderBoardRow(rowNum) {\n    let squares = [];\n    for(let colNum=0; colNum<this.props.gridSize; colNum++) {\n      const arrayIndex = colNum + this.props.gridSize * rowNum;\n      squares = squares.concat(this.renderSquare(arrayIndex));\n    }\n    return (\n      <div key={rowNum} className=\"board-row\">\n        {squares}\n      </div>\n    )\n  }\n\n  render() {\n    let rows = [];\n    for (let rowNum = 0; rowNum < this.props.gridSize; rowNum++) {\n      rows = rows.concat(this.renderBoardRow(rowNum))\n    }\n    return (\n      <div>\n        {rows}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.gridSize = 3\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        location: 0,\n      }],\n      //the trailing comma is a coding convention for cleaner git commits\n      //See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas\n      xIsNext: true,\n      stepNumber: 0,\n      orderMovesAsc: true,\n    };\n  }\n\n  handleClick(i) {\n\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[history.length - 1];\n    /*\n    Create a copy of the squares array and manipulate it rather than the original array. This is done because it \n    is easier to detect changes between immutable objects, rather than checking one mutating object to see if it has \n    changed. This makes it easier for React to deteremine if a component needs to be re-rendered.\n    */\n    const squares = current.squares.slice();\n\n    //don't set the state if the game is won or tied or the square is already occupied.\n    const [gameOver] = calculateWinner(squares);\n    if ( gameOver || squares[i]) {\n      return\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      //concat does not mutate the array\n      history: history.concat([{\n        squares: squares,\n        location: i,\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    })\n  }\n\n  handleSortOrder() {\n    this.setState({\n     orderMovesAsc: !this.state.orderMovesAsc\n    });\n  \n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const [winner, winningSquares] = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      const location = move ? getLocation(step.location, this.gridSize) : '';\n      const applyStyle = move === this.state.stepNumber\n      return (\n        <li key={move}>\n          <button className={applyStyle ? 'current-move' : null} onClick={() => this.jumpTo(move)}>{desc}</button> {location}\n        </li>\n      );\n    });\n    let status;\n    if (winner && winner === DRAW) {\n      status = 'Draw: No winner.'\n    } else if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    if(!this.state.orderMovesAsc) {\n      moves.reverse()\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            gridSize={this.gridSize}\n            winningSquares={winningSquares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div className=\"sort-button\">\n            <SortOrder\n              orderMovesAsc = {this.state.orderMovesAsc}\n              onClick={() => this.handleSortOrder() }\n            />\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [squares[a], lines[i]];\n    }\n  }\n  if (squares.includes(null)) {\n    return [null, null];\n  } else {\n    return [DRAW, null];\n  }\n}\n\nfunction getLocation(arrayIndex, gridSize) {\n  const offset = 1; //Start grid columns & rows at 1 instead of 0 for easier reading\n  const col = offset + arrayIndex % gridSize;\n  const row = offset + Math.floor(arrayIndex / gridSize);\n  return `[${col},${row}]`\n}\n\n"],"sourceRoot":""}